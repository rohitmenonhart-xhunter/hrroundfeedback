import React from 'react';
import { FeedbackEntry } from '../types';
import { Calendar, Download } from 'lucide-react';

interface FeedbackCardProps {
  feedback: FeedbackEntry;
}

const RatingSection: React.FC<{ title: string, percentage: string, content: string }> = ({ 
  title, 
  percentage,
  content
}) => {
  return (
    <div className="mb-6">
      <h3 className="text-lg font-semibold text-gray-800 mb-2">
        {title} ({percentage})
      </h3>
      <p className="text-gray-700 whitespace-pre-line">{content}</p>
    </div>
  );
};

export const FeedbackCard: React.FC<FeedbackCardProps> = ({ feedback }) => {
  const getStarColor = (rating: number) => {
    if (rating >= 4.5) return 'text-green-500';
    if (rating >= 3.5) return 'text-blue-500';
    if (rating >= 2.5) return 'text-yellow-500';
    return 'text-red-500';
  };

  const getStatusMessage = (rating: number) => {
    if (rating >= 4.5) return 'Ready for interviews! Keep up the excellent work!';
    if (rating >= 3.5) return 'Good progress, but some areas need refinement';
    if (rating >= 2.5) return 'Needs improvement in several key areas';
    return 'Significant preparation needed before interviews';
  };

  // Split the feedback into sections based on numbering
  const feedbackSections = feedback.feedback.split(/\d+\.\s+/).filter(Boolean);

  const handleDownload = () => {
    const reportContent = `
MOCKELLO INTERVIEW FEEDBACK REPORT
=================================

Candidate: ${feedback.name}
Register Number: ${feedback.registerNumber}
Date: ${new Date(feedback.timestamp).toLocaleDateString()}
Overall Rating: ${'★'.repeat(Math.floor(feedback.stars))}${feedback.stars % 1 >= 0.5 ? '½' : ''}${'☆'.repeat(5 - Math.ceil(feedback.stars))}
Status: ${getStatusMessage(feedback.stars)}

DETAILED FEEDBACK
----------------

1. Communication skills and clarity (25%):
${feedbackSections[0] || 'No feedback provided'}

2. Response quality and relevance (25%):
${feedbackSections[1] || 'No feedback provided'}

3. Professional demeanor (20%):
${feedbackSections[2] || 'No feedback provided'}

4. Problem-solving approach (20%):
${feedbackSections[3] || 'No feedback provided'}

5. Overall interview readiness (10%):
${feedbackSections[4] || 'No feedback provided'}

Generated by Mockello Feedback System
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `mockello-feedback-${feedback.registerNumber}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-8">
      <div className="flex justify-between items-start mb-8">
        <div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">{feedback.name}</h2>
          <p className="text-gray-600 mb-2">Register No: {feedback.registerNumber}</p>
          <div className="flex items-center text-gray-500 text-sm">
            <Calendar size={16} className="mr-2" />
            {new Date(feedback.timestamp).toLocaleDateString()}
          </div>
        </div>
        <button
          onClick={handleDownload}
          className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Download size={16} />
          Download Report
        </button>
      </div>

      <div className="bg-gray-50 rounded-lg p-6 mb-8">
        <div className={`text-2xl mb-2 ${getStarColor(feedback.stars)}`}>
          {'★'.repeat(Math.floor(feedback.stars))}
          {feedback.stars % 1 >= 0.5 ? '½' : ''}
          {'☆'.repeat(5 - Math.ceil(feedback.stars))}
        </div>
        <p className={`font-medium ${getStarColor(feedback.stars)}`}>
          {getStatusMessage(feedback.stars)}
        </p>
      </div>

      <RatingSection
        title="Communication skills and clarity"
        percentage="25%"
        content={feedbackSections[0] || 'No feedback provided'}
      />

      <RatingSection
        title="Response quality and relevance"
        percentage="25%"
        content={feedbackSections[1] || 'No feedback provided'}
      />

      <RatingSection
        title="Professional demeanor"
        percentage="20%"
        content={feedbackSections[2] || 'No feedback provided'}
      />

      <RatingSection
        title="Problem-solving approach"
        percentage="20%"
        content={feedbackSections[3] || 'No feedback provided'}
      />

      <RatingSection
        title="Overall interview readiness"
        percentage="10%"
        content={feedbackSections[4] || 'No feedback provided'}
      />
    </div>
  );
};